/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import org.xtext.example.mydsl.sWEUIBK.Domainmodel
import org.xtext.example.mydsl.sWEUIBK.ModelDeclaration
import org.xtext.example.mydsl.sWEUIBK.AnalyzerDeclaration
import org.xtext.example.mydsl.sWEUIBK.MonitorDeclaration
import org.xtext.example.mydsl.sWEUIBK.PageDeclaration
import org.xtext.example.mydsl.sWEUIBK.ModelAction
import org.xtext.example.mydsl.sWEUIBK.PageObjectAction
import org.xtext.example.mydsl.sWEUIBK.AnalyzerObjectAction
import org.xtext.example.mydsl.sWEUIBK.MonitorObjectAction
import org.xtext.example.mydsl.sWEUIBK.GenerateHeader
import org.xtext.example.mydsl.sWEUIBK.PageOperations
import org.xtext.example.mydsl.sWEUIBK.ConnectionType
import org.xtext.example.mydsl.sWEUIBK.AnalyzerOperations
import org.xtext.example.mydsl.sWEUIBK.MonitorOperations
import org.xtext.example.mydsl.sWEUIBK.SetConnecttionType





class SWEUIBKGenerator extends AbstractGenerator {


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		resource.allContents
		.filter(typeof(Domainmodel))
		.forEach[{
				fsa.generateFile("Analyzer.java", vnlContents)
			}]

	}


	def vnlContents(Domainmodel domainmodel) {
		'''
package mydsl;

import org.apache.http.Header;
import org.apache.http.message.BasicHeader;
import server.Analyzer;
import server.Model;
import server.Monitor;
import server.Page;
import java.util.ArrayList;
import java.util.List;

public class Generator {
	public static void main (String [] args){

	«FOR objectInitialization : domainmodel.elements»
		«IF objectInitialization.monitor !=null»
			«objectInitialization.monitor.monitorInitialization»
		«ENDIF»
		«IF objectInitialization.model !=null»
			«objectInitialization.model.modelInitialization»
		«ENDIF»
		«IF objectInitialization.page !=null»
			«objectInitialization.page.pageInitialization»

		«ENDIF»
		«IF objectInitialization.analyzer !=null»
			«objectInitialization.analyzer.analyzerInitialization»
		«ENDIF»
	«ENDFOR»

	«FOR objectAction : domainmodel.actions»
		«IF objectAction.monitorAction !=null»
			«objectAction.monitorAction.monitorAction»
		«ENDIF»
		«IF objectAction.modelAction !=null»
			«objectAction.modelAction.modelAction»
		«ENDIF»
		«IF objectAction.pageAction !=null»
			«objectAction.pageAction.pageAction»

		«ENDIF»
		«IF objectAction.analyzerAction !=null»
			«objectAction.analyzerAction.analyzerAction»
		«ENDIF»
	«ENDFOR»
	}
}
        '''.toString
	}

	def modelInitialization(ModelDeclaration model){
		'''
     Model «model.name.name» = new Model();
        '''.toString
	}

	def analyzerInitialization(AnalyzerDeclaration analyzer){
		'''
     Analyzer «analyzer.name.name» = new Analyzer();
        '''.toString
	}

	def monitorInitialization(MonitorDeclaration monitor){
		'''
     Monitor «monitor.name.name» = new Monitor();
     «monitor.name.name».initialzeFromSource("«monitor.url.url»");
        '''.toString
	}

	def pageInitialization(PageDeclaration page){
		'''
     Page «page.name.name» = new Page();
        '''.toString
	}

	def modelAction(ModelAction modelAction){
		'''
     «modelAction.name».initialzeFromSource("«modelAction.modelStructure.source»");
        '''.toString
	}

	def pageAction(PageObjectAction pageAction){
		'''
		«IF pageAction.value != null»
              «IF pageAction.value == PageOperations.URL»
	«pageAction.name».setUrl("«pageAction.method»");
              «ENDIF»
               «IF pageAction.setConnectionType != null»
              	«pageAction.name»«pageAction.setConnectionType.defineConnectionType»
              «ENDIF»
              «IF pageAction.headerList != null»
	«pageAction.headerList.generateHeaderList»
	«pageAction.name».setHeaderList(headerList);
              «ENDIF»
	  	«ENDIF»
        '''.toString
	}


	def monitorAction(MonitorObjectAction monitorAction){
		'''
		«IF monitorAction.value != null»
              «IF monitorAction.value == MonitorOperations.ADD»
	«monitorAction.name».setAnalyzer(«monitorAction.method»);
              «ELSE»
    «monitorAction.name».setAnalyzer(null);
              «ENDIF»
	  	«ENDIF»
        '''.toString
	}

	def analyzerAction(AnalyzerObjectAction analyzerAction){
		'''
		«IF analyzerAction.value != null»
              «IF analyzerAction.value == AnalyzerOperations.LOADMODEL»
	«analyzerAction.name».setModel(«analyzerAction.method»);
              «ENDIF»
              «IF analyzerAction.value == AnalyzerOperations.LOADPAGE»
	«analyzerAction.name».setPage(«analyzerAction.method»);
              «ENDIF»
              «IF analyzerAction.value == AnalyzerOperations.EXECUTE»
	«analyzerAction.name».execute();
              «ENDIF»
	  	«ENDIF»
        '''.toString
	}

	def generateHeaderList(GenerateHeader headerList){
		'''
	List<Header> headerList = new ArrayList<Header>();
		 «FOR header : headerList.header»
    headerList.add(new BasicHeader("«header.key»","«header.headerValue»"));
         «ENDFOR»
        '''.toString
	}

	def defineConnectionType(SetConnecttionType connectionType){
		'''
        «IF connectionType.type == ConnectionType.GET»
	.setConnectionType("GET");
              	«ELSE»
	.setConnectionType("POST");
              	«ENDIF»
        '''.toString
	}


}

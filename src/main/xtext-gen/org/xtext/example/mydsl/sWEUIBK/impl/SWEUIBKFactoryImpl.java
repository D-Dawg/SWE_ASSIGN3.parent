/**
 * generated by Xtext 2.9.2
 */
package org.xtext.example.mydsl.sWEUIBK.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.sWEUIBK.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SWEUIBKFactoryImpl extends EFactoryImpl implements SWEUIBKFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SWEUIBKFactory init()
  {
    try
    {
      SWEUIBKFactory theSWEUIBKFactory = (SWEUIBKFactory)EPackage.Registry.INSTANCE.getEFactory(SWEUIBKPackage.eNS_URI);
      if (theSWEUIBKFactory != null)
      {
        return theSWEUIBKFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SWEUIBKFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SWEUIBKFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SWEUIBKPackage.DOMAINMODEL: return createDomainmodel();
      case SWEUIBKPackage.OBJECT_DECLARATION: return createObjectDeclaration();
      case SWEUIBKPackage.MODEL_DECLARATION: return createModelDeclaration();
      case SWEUIBKPackage.MONITOR_DECLARATION: return createMonitorDeclaration();
      case SWEUIBKPackage.MONITOR_INITIALIZATION: return createMonitorInitialization();
      case SWEUIBKPackage.ANALYZER_DECLARATION: return createAnalyzerDeclaration();
      case SWEUIBKPackage.ANALYZER: return createAnalyzer();
      case SWEUIBKPackage.PAGE_DECLARATION: return createPageDeclaration();
      case SWEUIBKPackage.OBJECT_ACTION: return createObjectAction();
      case SWEUIBKPackage.MODEL_ACTION: return createModelAction();
      case SWEUIBKPackage.MODEL_STRUCTURE: return createModelStructure();
      case SWEUIBKPackage.MONITOR_OBJECT_ACTION: return createMonitorObjectAction();
      case SWEUIBKPackage.ANALYZER_OBJECT_ACTION: return createAnalyzerObjectAction();
      case SWEUIBKPackage.PAGE_OBJECT_ACTION: return createPageObjectAction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SWEUIBKPackage.MONITOR_OPERATIONS:
        return createMonitorOperationsFromString(eDataType, initialValue);
      case SWEUIBKPackage.ANALYZER_OPERATIONS:
        return createAnalyzerOperationsFromString(eDataType, initialValue);
      case SWEUIBKPackage.PAGE_OPERATIONS:
        return createPageOperationsFromString(eDataType, initialValue);
      case SWEUIBKPackage.CONNECTION_TYPE:
        return createConnectionTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SWEUIBKPackage.MONITOR_OPERATIONS:
        return convertMonitorOperationsToString(eDataType, instanceValue);
      case SWEUIBKPackage.ANALYZER_OPERATIONS:
        return convertAnalyzerOperationsToString(eDataType, instanceValue);
      case SWEUIBKPackage.PAGE_OPERATIONS:
        return convertPageOperationsToString(eDataType, instanceValue);
      case SWEUIBKPackage.CONNECTION_TYPE:
        return convertConnectionTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domainmodel createDomainmodel()
  {
    DomainmodelImpl domainmodel = new DomainmodelImpl();
    return domainmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectDeclaration createObjectDeclaration()
  {
    ObjectDeclarationImpl objectDeclaration = new ObjectDeclarationImpl();
    return objectDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelDeclaration createModelDeclaration()
  {
    ModelDeclarationImpl modelDeclaration = new ModelDeclarationImpl();
    return modelDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MonitorDeclaration createMonitorDeclaration()
  {
    MonitorDeclarationImpl monitorDeclaration = new MonitorDeclarationImpl();
    return monitorDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MonitorInitialization createMonitorInitialization()
  {
    MonitorInitializationImpl monitorInitialization = new MonitorInitializationImpl();
    return monitorInitialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnalyzerDeclaration createAnalyzerDeclaration()
  {
    AnalyzerDeclarationImpl analyzerDeclaration = new AnalyzerDeclarationImpl();
    return analyzerDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Analyzer createAnalyzer()
  {
    AnalyzerImpl analyzer = new AnalyzerImpl();
    return analyzer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PageDeclaration createPageDeclaration()
  {
    PageDeclarationImpl pageDeclaration = new PageDeclarationImpl();
    return pageDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectAction createObjectAction()
  {
    ObjectActionImpl objectAction = new ObjectActionImpl();
    return objectAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelAction createModelAction()
  {
    ModelActionImpl modelAction = new ModelActionImpl();
    return modelAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelStructure createModelStructure()
  {
    ModelStructureImpl modelStructure = new ModelStructureImpl();
    return modelStructure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MonitorObjectAction createMonitorObjectAction()
  {
    MonitorObjectActionImpl monitorObjectAction = new MonitorObjectActionImpl();
    return monitorObjectAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnalyzerObjectAction createAnalyzerObjectAction()
  {
    AnalyzerObjectActionImpl analyzerObjectAction = new AnalyzerObjectActionImpl();
    return analyzerObjectAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PageObjectAction createPageObjectAction()
  {
    PageObjectActionImpl pageObjectAction = new PageObjectActionImpl();
    return pageObjectAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MonitorOperations createMonitorOperationsFromString(EDataType eDataType, String initialValue)
  {
    MonitorOperations result = MonitorOperations.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMonitorOperationsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AnalyzerOperations createAnalyzerOperationsFromString(EDataType eDataType, String initialValue)
  {
    AnalyzerOperations result = AnalyzerOperations.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAnalyzerOperationsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PageOperations createPageOperationsFromString(EDataType eDataType, String initialValue)
  {
    PageOperations result = PageOperations.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPageOperationsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConnectionType createConnectionTypeFromString(EDataType eDataType, String initialValue)
  {
    ConnectionType result = ConnectionType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertConnectionTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SWEUIBKPackage getSWEUIBKPackage()
  {
    return (SWEUIBKPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SWEUIBKPackage getPackage()
  {
    return SWEUIBKPackage.eINSTANCE;
  }

} //SWEUIBKFactoryImpl
